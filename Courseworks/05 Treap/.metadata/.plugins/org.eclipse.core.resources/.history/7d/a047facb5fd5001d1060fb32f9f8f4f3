/* Thanapoom Phatthanaphan
 * 20011296
 * CS 570-PA
 * Homework 5
 * 7 Apr 2023
 */

import java.util.Stack;
import java.util.Random;

public class Treap<E extends Comparable<E>> {

    private static class Node<E>{
    	
    	// data fields for each node
        public E data;
        public int priority;
        public Node<E> left;
        public Node<E> right;

        public Node(E data, int priority) {
        	if (data == null) {
                throw new IllegalArgumentException("Data cannot be null");
            }
            else {
                this.left = null;
				this.right = null;
				this.data = data;
				this.priority = priority; 
            }
        }
        
        // method to perform right rotation
        public Node<E> rotateRight() {
            Node<E> tempNode = this.left;
            Node<E> tempNode_rightChild = tempNode.right;
            this.left = tempNode_rightChild;
            tempNode.right = this;
            return tempNode;
        }

        // method to perform a left rotation
        public Node<E> rotateLeft() {
            Node<E> tempNode = this.right;
            Node<E> tempNode_leftChild = tempNode.left;
            this.right = tempNode_leftChild;
            tempNode.left = this;
            return tempNode;
        }
    }

    private Random priorityGenerator;
    private Node<E> root;

    // creates an empty treap and initialize priorityGenerator using new Random()
    public Treap() {
        this.priorityGenerator = new Random();
		this.root = null;
    }

    // creates an empty treap and initialize priorityGenerator using new Random(seed)
    public Treap(long seed) {
        this.priorityGenerator = new Random(seed);
		this.root = null;
    }

    // helper function after insertion to restore the heap invariant (max-heap)
    void reheap(Node<E> newNode, Stack<Node<E>> path) {
    	while (path.size() != 0) {
    		Node<E> parentNode_newNode = path.pop();
    		if (newNode.priority < parentNode_newNode.priority) {
    			continue;
    		}
    		else {
    			if (newNode == parentNode_newNode.left) {
    				newNode = parentNode_newNode.rotateRight();
    			}
    			else {
    				newNode = parentNode_newNode.rotateLeft();
    			}
    			if (path.size() == 0) {
    				root = newNode;
    			}
    			else {
    				Node<E> grandparentNode_newNode = path.peek();
    				if (grandparentNode_newNode.right == parentNode_newNode) {
    		            grandparentNode_newNode.right = newNode;
    		        } 
    				else {
    		            grandparentNode_newNode.left = newNode;
    		        }
    			}
    		}
    	}
    }
    
    // create a new node with containing key as its data and a random priority generated by priorityGenerator
    // then call helper function for insertion
    // if the key is found and inserted into the treap, return true
    // if the key is not found, return false
    boolean add(E key) {
    	if (key == null) {
            throw new IllegalArgumentException("Key cannot be null");
        }
        int rand_num = priorityGenerator.nextInt();
        return add(key, rand_num);
    }
    
    // helper function to insert a node into the treap
    boolean add(E key, int priority) {
    	if (key == null) {
            throw new IllegalArgumentException("Key cannot be null");
        }
        if (root == null) {
            root = new Node<E>(key, priority);
            return true;
        }
        else {
        	Stack<Node<E>> path = new Stack<Node<E>>();
            Node<E> newNode = new Node<E>(key, priority);
            Node<E> tempRoot = root;
            if (key == root.data) {       
                return false;
            }
            while (tempRoot != null) {
            	if (key == tempRoot.data) {
            		break;
            	}
            	path.push(tempRoot);
            	if (key.compareTo(tempRoot.data) < 0) {
                    if (tempRoot.left == null) {
                        tempRoot.left = newNode;
                        reheap(newNode, path);
                        return true;
                    }
                    else {
                    	tempRoot = tempRoot.left;
                    }
            	}
            	else {
            		if (tempRoot.right == null) {
            			tempRoot.right = newNode;
            			reheap(newNode, path);
            			return true;
            		}
            		else {
            			tempRoot = tempRoot.right;
            		}
            	}
            }
            return false;
        }
    }
                      
    // function to delete a node with the given key from the treap and return true
    // if the key is not found, the treap remains the same and return false
    public boolean delete(E key) {
    	if (key == null) {
            throw new IllegalArgumentException("Key cannot be null");
        }
		if (find(key) == false || root == null) {
			return false;
		}
		Node<E> parentNode = null;
		Node<E> nodeToDelete = root;
		while (nodeToDelete.data != key) {
			parentNode = nodeToDelete;
			if (key.compareTo(nodeToDelete.data) < 0) {
				nodeToDelete = nodeToDelete.left;
			}
			else {
				nodeToDelete = nodeToDelete.right;
			}
		}
		if (nodeToDelete.left == null) {
	        if (parentNode == null) {
	            root = nodeToDelete.right;
	        } 
	        else if (nodeToDelete == parentNode.left) {
	            parentNode.left = nodeToDelete.right;
	        } 
	        else {
	            parentNode.right = nodeToDelete.right;
	        }
	    } 
		else if (nodeToDelete.right == null) {
	        if (parentNode == null) {
	            root = nodeToDelete.left;
	        } 
	        else if (nodeToDelete == parentNode.left) {
	            parentNode.left = nodeToDelete.left;
	        } 
	        else {
	            parentNode.right = nodeToDelete.left;
	        }
	    } 
		else {
	        if (nodeToDelete.left.priority < nodeToDelete.right.priority) {
	            nodeToDelete = nodeToDelete.rotateRight();
	            delete(key);
	        } 
	        else {
	            nodeToDelete = nodeToDelete.rotateLeft();
	            delete(key);
	        }
	        if (parentNode == null) {
	            root = nodeToDelete;
	        } 
	        else if (nodeToDelete == parentNode.left) {
	            parentNode.left = nodeToDelete;
	        } 
	        else {
	            parentNode.right = nodeToDelete;
	        }
	    }
	    return true;
    }

    // finds a node with the given key in the treap rooted at root
    // returns true if it finds it and false otherwise.
    private boolean find(Node<E> root, E key) {
    	if (key == null) {
            throw new IllegalArgumentException("Key cannot be null");
        }
    	if (root == null) {
    		return false;
    	}
    	if (key == root.data) {
    		return true;
    	}
    	else if (key.compareTo(root.data) < 0) {
    		return find(root.left, key);
    	}
    	else {
    		return find(root.right, key);
    	}
    }

    // Finds a node with the given key in the treap
    // returns true if it finds it and false otherwise.
    public boolean find(E key) {
        if (key == null) {
            throw new IllegalArgumentException("Key cannot be null");
        }
        return find(root, key);
    }

    // Carries out a preorder traversal of the tree and returns a representation of the nodes as a string
    public String toString() {
        StringBuilder result = new StringBuilder();
		preOrderTraversal(root, 1, result);
		return result.toString();
    }

    // function to build a string output of the treap
    private void preOrderTraversal(Node<E> node, int length, StringBuilder resultBuilder) {
		for (int i = 0; i < length; i++) {
			resultBuilder.append("  ");
		}
		if (node == null) {
			resultBuilder.append("null\n");
		} 
		else {
			resultBuilder.append("(key = " + node.data + ", priority = " + node.priority + ")\n");
			length++;
			preOrderTraversal(node.left, length, resultBuilder);
			preOrderTraversal(node.right, length, resultBuilder);
		}
	}

    public static void main(String[] args) throws Exception {
		Treap<Integer> testTree = new Treap<Integer>();
		// Test for adding elements
		testTree.add(4,19); 
		testTree.add(2,31);
		testTree.add(6,70); 
		testTree.add(1,84);
		testTree.add(3,12); 
		testTree.add(5,83);
		testTree.add(7,26);
		
        System.out.println("Status of deleteing a node: " + testTree.delete(9));
        System.out.println("Current tree");
        System.out.println(testTree.toString());
        System.out.println();
        System.out.println("Status of deleteing a node: " + testTree.delete(2));
        System.out.println("Current tree");
        System.out.println(testTree.toString());
        System.out.println();
        
		System.out.println("Status of finding a node: "+ testTree.find(1));
		System.out.println("Status of finding a node: "+ testTree.find(0));
    }
}
